-- Abstract DataTypes

DATA Root
    | Root ntree:NTree

DATA NTree
    | NTree Node ntrees:NTrees

TYPE NTrees = [NTree]

DATA Node
    | NText     String
    | NTag      String
    | NStyle
    | NRuleCss  rule:{(Selector, [Property])}

DATA Selector
    | SimpSelector SSelector
    | CombSelector SSelector String Selector -- combinators: ' ', >, +

DATA SSelector
    | TypeSelector String
    | UnivSelector

DATA Property
    | Property prop: String value: String

DERIVING *: Show

{
instance Eq Node where
    NTag n1 == NTag n2 = n1 == n2
    _      == _      = False
}

{
-- examples
ex1 = NTree (NTag "html") [ NTree (NTag "h1") [NTree (NText "title h1" ) [], NTree (NTag "em") [NTree (NText "element em") []]]
                          , NTree (NTag "p" ) [NTree (NTag "small") [NTree (NText "small"  ) []], NTree (NText "element p") [], NTree (NTag "small") [NTree (NText "small"  ) []]]
                          , NTree (NText "carlos") []
                          , NTree (NTag "em") [NTree (NText "element p") [], NTree (NTag "small") [NTree (NText "small"  ) []]]
                          ]

ex2 = NTree (NTag "html") [NTree (NTag "div") [ NTree (NTag "h1")[ NTree (NText "text")[]] 
                                              , NTree (NTag "p") [ NTree (NTag "small")[], NTree (NText "text") [], NTree (NTag "big") []]
                                              ]
                          ]

ex3 = NTree (NTag "html") [NTree (NTag "head")[], NTree (NTag "body") []]

ex4 = NTree (NTag "html") [NTree (NTag "head") [NTree (NTag "body")[]]]

ex5 = NTree (NTag "html") []
}
